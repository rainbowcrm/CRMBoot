--10-10-16

INSERT INTO FINITE_VALUE_TYPE (CODE, DESCRIPTION) VALUES ('CONTTYPE','CONTACT TYPE');

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('VENDOR','CONTTYPE','Vendor');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('CUSTOMER','CONTTYPE','Customer');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('POTCUST','CONTTYPE','Potential Customer');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('TRANSPORT','CONTTYPE','Transporter');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('AGENT','CONTTYPE','Sales Agent');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('BPARTNER','CONTTYPE','Business Partner');




CREATE TABLE CONTACTS (
ID INT PRIMARY KEY AUTO_INCREMENT,
COMPANY_ID INT NOT NULL,
FIRST_NAME VARCHAR(50)  NOT NULL,
LAST_NAME VARCHAR(50)  NOT NULL,
DESCRIPTION VARCHAR(100),
PHONE VARCHAR(50) NOT NULL  ,
EMAIL VARCHAR(50) NOT NULL ,
CONTACT_TYPE VARCHAR(10),
ADDRESS1 VARCHAR(50),
ADDRESS2 VARCHAR(50),
ZIPCODE VARCHAR(50),
CITY VARCHAR(50),
LANDMARK VARCHAR(100),
ALTERNATEPHONE VARCHAR(50), 
IS_DELETED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (CONTACT_TYPE) REFERENCES FINITE_VALUES(CODE)
);

INSERT INTO METADATA(ENTITY,CLASS_NAME) VALUES('CONTACT','com.rainbow.crm.contact.model.Contact');
----------------------

11-10-16
_________________________________________

CREATE TABLE FOLLOWUPS (
ID INT PRIMARY KEY AUTO_INCREMENT,
COMPANY_ID INT NOT NULL,
SALESLEAD_ID INT NOT NULL,
CONVERSATION BLOB,
CONFIDENCE_LEVEL VARCHAR(10),
COMMUNICATION_MODE VARCHAR(10),
OFFERED_PRICE FLOAT,
SALES_ASSOCIATE VARCHAR(50),
NEXT_FOLLOWUP DATETIME,
FINAL_FOLLOWUP BOOLEAN DEFAULT FALSE,
RESULT VARCHAR(10),
RESULT_REASON VARCHAR(10) ,
SALESASSOC_COMMENTS BLOB
IS_DELETED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (CONFIDENCE_LEVEL) REFERENCES FINITE_VALUES(CODE),
FOREIGN KEY (SALESLEAD_ID) REFERENCES SALES_LEADS(ID),
FOREIGN KEY (COMMUNICATION_MODE) REFERENCES FINITE_VALUES(CODE),
FOREIGN KEY (RESULT) REFERENCES FINITE_VALUES(CODE),
FOREIGN KEY (RESULT_REASON) REFERENCES FINITE_VALUES(CODE)
);


INSERT INTO FINITE_VALUE_TYPE (CODE, DESCRIPTION) VALUES ('COMMMODE', 'MODE OF COMMUNICATION');
INSERT INTO FINITE_VALUE_TYPE (CODE, DESCRIPTION) VALUES ('CONFLEVEL', 'LEVEL OF CONFIDENCE');
INSERT INTO FINITE_VALUE_TYPE (CODE, DESCRIPTION) VALUES ('FLPRESULT', 'FOLLOW UP RESULT');
INSERT INTO FINITE_VALUE_TYPE (CODE, DESCRIPTION) VALUES ('SUCCREAS', 'REASON FOR SALE');
INSERT INTO FINITE_VALUE_TYPE (CODE, DESCRIPTION) VALUES ('FAILREAS', 'REASON FOR NO/SALE');

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('PHONE','COMMMODE','Telephone');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('EMAIL','COMMMODE','Email');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('PERSVISIT','COMMMODE','Personal visit to Customer');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('PREMVISIT','COMMMODE','Customer visiting facility');

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('HIGHCONF','CONFLEVEL','High level of confidence');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('UPMEDCONF','CONFLEVEL','Upper-Medium level of confidence');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('MEDCONF','CONFLEVEL','Medium level of confidence');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('LOWMEDCONF','CONFLEVEL','Lower-Medium level of confidence');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('LOWCONF','CONFLEVEL','Low level of confidence');

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('SOLD','FLPRESULT','Sold');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('SLPENDING','FLPRESULT','Pending');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('NOSALE','FLPRESULT','No Sale');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('PARTSALE','FLPRESULT','Partial Sale');


INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('CUSTDESIRE','SUCCREAS','Desire of customer');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('LOWERPRICE','SUCCREAS','Price reduction');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('PERSUATION','SUCCREAS','Persuation');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('POSREP','SUCCREAS','Positive Reputation from other sources');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('REFERENCE','SUCCREAS','Reference/Recommendation from other customers');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('CUSTSATISF','SUCCREAS','Customer Satisfaction from previous sales');

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('HIGHPRICE','FAILREAS','Higher Price');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('UNAVLBLE','FAILREAS','Unavailability of prod specification');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('SLSNEGL','FAILREAS','Negligence from sales');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('CUSTDISS','FAILREAS','Customer dissatisfaction from previous sales');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('NEGREP','FAILREAS','Negative reputation from other sources');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('COMPET','FAILREAS','Lost to competition');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('UNIDENT','FAILREAS','Unidentified reason');
__________________________________________________________________________________________________________________
23-OCT-16
Delete from finite_values where type_code = 'CONFLEVEL';

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('HIGHCONF','CONFLEVEL','High');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('UPMEDCONF','CONFLEVEL','Upper-Medium');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('MEDCONF','CONFLEVEL','Medium');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('LOWMEDCONF','CONFLEVEL','Lower-Medium');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('LOWCONF','CONFLEVEL','Low');
__________________________________________________________________________________________________________________
25-0ct-16
INSERT INTO METADATA(ENTITY,CLASS_NAME) VALUES('FOLLOWUP','com.rainbow.crm.followup.model.Followup');
________________________
5- nov -11

CREATE TABLE ALERTS (
ID INT PRIMARY KEY AUTO_INCREMENT,
COMPANY_ID INT NOT NULL,
DIVISION_ID INT NOT NULL,
RAISED_DATE DATETIME NOT NULL,
ACTION_DATE DATETIME,
ACKNO_DATE DATETIME ,
ALERT_TYPE VARCHAR(10) NOT NULL,
STATUS VARCHAR(10) NOT NULL,
OWNER  VARCHAR(50),
RAISED_BY VARCHAR(50),
DATA VARCHAR(50) NOT NULL,
URL VARCHAR(100),
IS_DELETED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (DIVISION_ID) REFERENCES DIVISIONS(ID),
FOREIGN KEY (ALERT_TYPE) REFERENCES FINITE_VALUES(CODE),
FOREIGN KEY (STATUS) REFERENCES FINITE_VALUES(CODE),
FOREIGN KEY (OWNER) REFERENCES USERS(USER_ID)
);

INSERT INTO FINITE_VALUE_TYPE (CODE, DESCRIPTION) VALUES ('ALTTYPE', 'ALERT TYPE');
INSERT INTO FINITE_VALUE_TYPE (CODE, DESCRIPTION) VALUES ('ALTSTATUS', 'ALERT STATUS');

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ALTSLSLEAD','ALTTYPE','Sales Lead Alert');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ALTFLLWUP','ALTTYPE','Follow Up Date');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ALTINVSHRT','ALTTYPE','Inventory Shortage');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ALTAPP','ALTTYPE','Appointment for the day');



INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ALTOPN','ALTSTATUS','Open');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ALTACK','ALTSTATUS','Acknowledged');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ALTVOID','ALTSTATUS','Voided');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ALTEXPRD','ALTSTATUS','Expired');
_________________________________________________________________________________________________________________________________

17-nov-11

ALTER TABLE  SALES_PERIODS ADD IS_START_ALERTED BOOLEAN DEFAULT FALSE;
ALTER TABLE  SALES_PERIODS ADD IS_END_ALERTED BOOLEAN DEFAULT FALSE;
ALTER TABLE  SALES_LEADS ADD IS_ALERTED BOOLEAN DEFAULT FALSE;
ALTER TABLE  FOLLOWUPS ADD IS_ALERTED BOOLEAN DEFAULT FALSE;

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ALTSPBEGIN','ALTTYPE','Sales Period Begin');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ALTSPEND','ALTTYPE','Sales Period End');
________________________________________________________________________________________________________________________________
7-DEC-11

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ALTDLVDUE','ALTTYPE','Delivery Due');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ALTPYMDUE','ALTTYPE','Payment Due');


INSERT INTO FINITE_VALUE_TYPE (CODE, DESCRIPTION) VALUES ('DLVMODE', 'DELIVERY MODE');


INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('PICKUP','DLVMODE','Pickup at source');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('COURIER','DLVMODE','Delivery by courier');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('INTERN','DLVMODE','Delivery by internal transport');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('POSTAL','DLVMODE','Delivery by Postal Service');

ALTER TABLE SALES ADD  IS_FUTUREDELIVERY BOOLEAN DEFAULT FALSE ;
ALTER TABLE SALES ADD DELIVERY_MODE VARCHAR(10);
ALTER TABLE SALES ADD DELIVERY_AGENT VARCHAR(100) ;
ALTER TABLE SALES ADD DELIVERY_DATE  DATETIME ;
ALTER TABLE SALES ADD PAYMENT_DUE_DATE DATETIME ;

ALTER TABLE SALES ADD FOREIGN KEY (DELIVERY_MODE) REFERENCES FINITE_VALUES(CODE);

_______________________________________________________________________________________________________

14- DEC - 11

INSERT INTO FINITE_VALUE_TYPE (CODE, DESCRIPTION) VALUES ('SLORDTYPE', 'SALES ORDER TYPE');

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ECOM','SLORDTYPE','E-Commerce Order');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('STRSALE','SLORDTYPE','Store Sale');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('CNTRACT','SLORDTYPE','Contract');

ALTER TABLE SALES ADD ORDER_TYPE VARCHAR(10);
________________________________________________________________________________________________________

18-DEC-16

INSERT INTO FINITE_VALUE_TYPE (CODE, DESCRIPTION) VALUES ('ADDTYPE', 'ADDRESS TYPE');

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('BLLNG','ADDTYPE','Billing');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('SHPPRM','ADDTYPE','Shipping Primary');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('SHPSEC','ADDTYPE','Shipping Secondary');


CREATE TABLE ADDRESSES (
ID INT PRIMARY KEY AUTO_INCREMENT,
COMPANY_ID INT NOT NULL,
DIVISION_ID INT NOT NULL,
CUSTOMER_ID INT,
ADDRESS_TYPE VARCHAR(10) NOT NULL,
RECIPIENT VARCHAR(50) NOT NULL,
ADDRESS1 VARCHAR(50) NOT NULL,
ADDRESS2 VARCHAR(50) NOT NULL,
ZIPCODE VARCHAR(40) NOT NULL,
CITY VARCHAR(40) NOT NULL,
STATE VARCHAR(40) NOT NULL,
COUNTRY VARCHAR(40),
PHONE VARCHAR(40),
EMAIL VARCHAR(40),
IS_DELETED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (DIVISION_ID) REFERENCES DIVISIONS(ID),
FOREIGN KEY (ADDRESS_TYPE) REFERENCES FINITE_VALUES(CODE),
FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(ID)
);

__________________________________________________________________________________________________________

19 DESC

ALTER TABLE SALES ADD DELIVERY_ADDRESS_ID INT;

ALTER TABLE SALES ADD FOREIGN KEY (DELIVERY_ADDRESS_ID) REFERENCES ADDRESSES(ID);


ALTER TABLE ADDRESSES DROP FOREIGN KEY  addresses_ibfk_2;
ALTER TABLE ADDRESSES DROP FOREIGN KEY FKlj5s9f32rgq29vbruh84ufv0;
ALTER TABLE ADDRESSES DROP DIVISION_ID;
_____________________________________________________________________________________________________________
21 deF

CREATE TABLE CUSTOMER_CATEGORIES (
ID INT PRIMARY KEY AUTO_INCREMENT,
COMPANY_ID INT NOT NULL,
NAME VARCHAR(50) NOT NULL,
EVAL_FROM VARCHAR(10) NOT NULL,
EVAL_TO VARCHAR(10) NOT NULL,
EVAL_CRITERIA VARCHAR(10) NOT NULL,
MIN_VALUE FLOAT NOT NULL,
MAX_VALUE FLOAT NOT NULL,
INCLUDE_RETURNS BOOLEAN DEFAULT FALSE,
EXCLUDE_CUST BLOB ,
IS_DELETED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (EVAL_FROM) REFERENCES FINITE_VALUES(CODE),
FOREIGN KEY (EVAL_TO) REFERENCES FINITE_VALUES(CODE),
FOREIGN KEY (EVAL_CRITERIA) REFERENCES FINITE_VALUES(CODE)
);


INSERT INTO FINITE_VALUE_TYPE (CODE, DESCRIPTION) VALUES ('EVALDATE', 'EVALUATION DATE');
INSERT INTO FINITE_VALUE_TYPE (CODE, DESCRIPTION) VALUES ('EVALCRT', 'EVALUATION CRITERIA');


INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('TODAY','EVALDATE','Today');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('LSTWEEK','EVALDATE','Last Week');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('LSTMNTH','EVALDATE','Last Month');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('LSTTWOMNTH','EVALDATE','Last Two Months');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('LSTTHRMNTH','EVALDATE','Last Three Months');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('LSTSIXMNTH','EVALDATE','Last Six Months');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('LSTYR','EVALDATE','Last Year');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('LSTTWOYR','EVALDATE','Last Two Year');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('LSTTHRYR','EVALDATE','Last Three Year');

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('QTY','EVALCRT','Quantity');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('AMT','EVALCRT','Amount');
_________________________________________________________________________________________________________________________________

25 dec


CREATE TABLE CONFIG_GROUPS (
GROUP_NAME VARCHAR(50) PRIMARY KEY NOT NULL
);

CREATE TABLE BASE_CONFIGURATION (
CODE VARCHAR(20) PRIMARY KEY ,
CONFIG_DESCRIPTION VARCHAR(50) NOT NULL,
CONFIG_GROUP VARCHAR(50) NOT NULL,
VALUE_TYPE VARCHAR(10) NOT NULL,
VALUE_GENERATOR VARCHAR(10),
DEFAULT_VALUE VARCHAR(50),
FOREIGN KEY (CONFIG_GROUP) REFERENCES CONFIG_GROUPS(GROUP_NAME),
FOREIGN KEY (VALUE_TYPE) REFERENCES FINITE_VALUES(CODE)
);
CREATE TABLE COMPANY_CONFIGURATION (
ID INT PRIMARY KEY AUTO_INCREMENT,
CONFIG_CODE VARCHAR(20) NOT NULL,
COMPANY_ID INT NOT NULL,
VALUE VARCHAR(50) ,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (CONFIG_CODE) REFERENCES BASE_CONFIGURATION(CODE),
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID)
);


INSERT INTO FINITE_VALUE_TYPE (CODE, DESCRIPTION) VALUES ('CONFVALTYP', 'CONFIGURATION VALUE TYPES');
INSERT INTO FINITE_VALUE_TYPE (CODE, DESCRIPTION) VALUES ('USRPRIVTYP', 'USER PRIVILEGE TYPES');


INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('NUMER','CONFVALTYP','Numeric Values');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('STR','CONFVALTYP','String Value');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('FINVAL','CONFVALTYP','Finite Values');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('BOOL','CONFVALTYP','Boolean Values');

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ALLUSR','USRPRIVTYP','All Users');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('MGRUSR','USRPRIVTYP','Managers');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ADMUSR','USRPRIVTYP','Administrator');


INSERT INTO CONFIG_GROUPS(GROUP_NAME) VALUE('General');
INSERT INTO CONFIG_GROUPS(GROUP_NAME) VALUE('Customer Management');
INSERT INTO CONFIG_GROUPS(GROUP_NAME) VALUE('Inventory');
INSERT INTO CONFIG_GROUPS(GROUP_NAME) VALUE('Payment');
INSERT INTO CONFIG_GROUPS(GROUP_NAME) VALUE('Order Management');


INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('CURRENCY','Company Currency','General','STR',null,'$');
INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('CONFPRIVIL','Allow Configuration Rights to','General','FINVAL','USRPRIVTYP','MGRUSR');
INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('ANLREPPRIVIL','Show Analytical reports to','General','FINVAL','USRPRIVTYP','MGRUSR');
INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('TRGSETPRIV','Show Target Set to','General','FINVAL','USRPRIVTYP','MGRUSR');
INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('ALLOWRETURNS','Allow Sales Return','General','BOOL',null,'true');



INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('LOYALTY','Sales Amount required per loyalty point','Customer Management','NUMER',null,null);
INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('RDMLOYALTY','Amount that can be redeemed per 100 loyalty point','Customer Management','NUMER',null,null);
INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('RDCLYLTRT','Reduce Loyalty based on returns','Customer Management','BOOL',null,'true');
INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('LDEMAIL','Tempate to send promotion email','Customer Management','STR',null,'salesLeadEmail.vm');

INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('TRCKINVEN','Track Inventory','Inventory','BOOL',null,'true');
INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('ALLWTRAN','Allow Inventory transfer between Divisions','Inventory','BOOL',null,'true');
INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('ALLWSALE','Allow Sale with no inventory','Inventory','BOOL',null,'true');
INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('SLSINVPRN','Tempate to print sales invoice','Inventory','STR',null,'salesInvoice.vm');

INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('CAPTTEND','Capture Tender Details in billing','Payment','BOOL',null,'false');


INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('MULIDIVSHIP','Allow shipping from multiple divisions','Order Management','BOOL',null,'true');

__________________________________________________________________________________________________________________________
27  DEcc

CREATE TABLE CARRIERS (
ID INT PRIMARY KEY AUTO_INCREMENT,
COMPANY_ID INT NOT NULL,
CARRIER_CODE VARCHAR(20) NOT NULL,
CARRIER_NAME VARCHAR(50) NOT NULL,
ADDRESS_1 VARCHAR(50),
ADDRESS_2 VARCHAR(50),
CITY VARCHAR(50),
ZIPCODE VARCHAR(50),
PHONE VARCHAR(50),
EMAIL VARCHAR(50),
WEBSITE VARCHAR(50),
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID)
);


CREATE TABLE DISTRIBUTION_ORDERS (
ID INT PRIMARY KEY AUTO_INCREMENT,
COMPANY_ID INT NOT NULL,
DIVISION_ID INT NOT NULL,
DOC_NUMBER VARCHAR(50) NOT NULL,
SALES_ID INT NOT NULL,
ORDER_DATE DATETIME,
PACK_DATE DATETIME,
CUSTOMER_ID  INT,
CARRIER_ID INT,
DELIVERY_ADDRESS_ID INT,
STATUS VARCHAR(10),
COMMENTS VARCHAR(100),
SHIPPING_DATE DATETIME,
SHIPPING_CHARGES FLOAT,
SHIP_REF_NO VARCHAR(50),
PROCESSING_USER VARCHAR(50),
IS_VOIDED BOOLEAN DEFAULT FALSE,
IS_ALERTED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (DIVISION_ID) REFERENCES DIVISIONS(ID),
FOREIGN KEY (SALES_ID) REFERENCES SALES(ID),
FOREIGN KEY (CARRIER_ID) REFERENCES CARRIERS(ID),
FOREIGN KEY (PROCESSING_USER) REFERENCES USERS(USER_ID),
FOREIGN KEY (DELIVERY_ADDRESS_ID) REFERENCES ADDRESSES(ID)
);

CREATE TABLE DISTRIBUTION_ORDER_LINES (
ID INT PRIMARY KEY ,
ORDER_ID INT NOT NULL,
COMPANY_ID INT NOT NULL,
DOC_NUMBER VARCHAR(50) NOT NULL,
LINE_NUMBER INT NOT NULL,
ITEM_ID INT NOT NULL,
QTY INT NOT NULL,
PICK_DATE DATETIME,
COMMENTS VARCHAR(200),
IS_VOIDED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (ITEM_ID) REFERENCES ITEMS(ID),
FOREIGN KEY (ORDER_ID) REFERENCES DISTRIBUTION_ORDERS(ID)
);
INSERT INTO FINITE_VALUE_TYPE (CODE, DESCRIPTION) VALUES ('DOSTATUS', 'DISTRIBUTION ORDER STATUS');

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('RLSD','DOSTATUS','Released');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('PICKNG','DOSTATUS','Picking');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('PACKNG','DOSTATUS','Packing');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('SHPPNG','DOSTATUS','Shipping');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('DLVD','DOSTATUS','Delivered');


INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ALTDO','ALTTYPE','Distribution Order Created');

INSERT INTO NEXTUP_CONFIG (COMPANY_ID,PROGRAM,FIELD1_TYPE,FIELD1_WIDTH,FIELD1_VAULE,FIELD2_TYPE,FIELD2_WIDTH,FIELD2_VAULE,FIELD3_TYPE,FIELD3_WIDTH,FIELD3_VAULE,FIELD4_TYPE,FIELD4_WIDTH,FIELD4_VAULE) VALUES ( -1, 'Distribution Order','DIVCODE',4,NULL,'CONSTANT',3,'DO','SEQCOMP',5,NULL,NULL,NULL,NULL);

_____________________________________________________________________________________________________________________________________
30-Dec

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('PICKD','DOSTATUS','Picked');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('PACKD','DOSTATUS','Packed');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('SHPPD','DOSTATUS','Shipped');
________________________________________

ALTER TABLE INVENTORY ADD RESERVED_QTY INT 	 ;

ALTER TABLE INVENTORY ADD DAMAGED_QTY INT ;

INSERT INTO METADATA(ENTITY,CLASS_NAME) VALUES('DO','com.rainbow.crm.distrbutionorder.model.DistributionOrder');

INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('ORDLBLPRIN','Tempate to print Shipping Label','Order Management','STR',null,'shippingLabel.vm');
____________________________________________________________________
4-jan-16

INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('IMGSRVHST','Image Server Host','General','STR',null,null);
INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('IMGSRVUSR','Image Server User','General','STR',null,null);
INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('IMGSRVPWD','Image Server Password','General','STR',null,null);
INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('IMGSRVPRT','Image Server Port','General','NUMER',null,null);

____________________________________________________________________________________________________________

rename table items to skus;

alter table skus CHANGE ITEM_CODE SKU_CODE VARCHAR(50)  NOT NULL;

alter table skus CHANGE ITEM_NAME SKU_NAME VARCHAR(50)  NOT NULL;

ALTER TABLE ITEM_IMAGES CHANGE ITEM_ID SKU_ID INT NOT NULL;

ALTER TABLE INVENTORY CHANGE ITEM_ID SKU_ID INT NOT NULL;

ALTER TABLE PURCHASE_LINES CHANGE ITEM_ID SKU_ID INT NOT NULL;

ALTER TABLE SALESPERIOD_LINES CHANGE ITEM_ID SKU_ID INT NOT NULL;

ALTER TABLE SALES_LINES CHANGE ITEM_ID SKU_ID INT NOT NULL;

ALTER TABLE SALESLEAD_LINES CHANGE ITEM_ID SKU_ID INT NOT NULL;

ALTER TABLE WISHLIST_LINES CHANGE ITEM_ID SKU_ID INT NOT NULL;

ALTER TABLE DISTRIBUTION_ORDER_LINES CHANGE ITEM_ID SKU_ID INT NOT NULL;

delete from METADATA where entity = 'ITEM';
INSERT INTO METADATA(ENTITY,CLASS_NAME) VALUES('SKU','com.rainbow.crm.item.model.Sku');


CREATE TABLE ITEMS (
ID INT PRIMARY KEY AUTO_INCREMENT,
COMPANY_ID INT NOT NULL,
ITEM_CODE VARCHAR(50)  NOT NULL,
ITEM_NAME VARCHAR(50)  NOT NULL,
DESCRIPTION VARCHAR(100),
PRODUCT_ID INT NOT NULL,
MANUFACTURER VARCHAR(50),
ITEM_CLASS  VARCHAR(10),
UOM_ID INT NOT NULL,
PURCHASE_PRICE FLOAT,
MAX_PRICE FLOAT,
RETAIL_PRICE  FLOAT,
WHOLESALE_PRICE FLOAT,
BREAK_EVEN_PRICE FLOAT,
PROMOTION_PRICE FLOAT,
MAX_DISCOUNT FLOAT,
ON_PROMOTION BOOLEAN DEFAULT FALSE,
SPECIFICATION VARCHAR(250),
IS_DELETED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (PRODUCT_ID) REFERENCES CATEGORIES(ID),
FOREIGN KEY (UOM_ID) REFERENCES UOMS(ID)
);


INSERT INTO METADATA(ENTITY,CLASS_NAME) VALUES('ITEM','com.rainbow.crm.item.model.Item');

ALTER TABLE SKUS ADD  ITEM_ID INT 
ALTER TABLE SKUS ADD FOREIGN KEY (ITEM_ID) REFERENCES ITEMS(ID)
update skus set item_id = (select id from items where skus.sku_code = items.item_code)



ALTER TABLE SALESPERIOD_LINES CHANGE  SKU_ID ITEM_ID  INT NOT NULL;
INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('IMGSRVURL','Image Server URL','General','STR',null,null);

__________________________________________________________________________________________
9-JAN-17

INSERT INTO FINITE_VALUE_TYPE (CODE, DESCRIPTION) VALUES ('SPFTYPE', 'SALES PORTFOLIO TYPE');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('SPFCATG','SPFTYPE','Category');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('SPFPROD','SPFTYPE','Product');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('SPFBRAND','SPFTYPE','Brand');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('SPFITEM','SPFTYPE','Item');


CREATE TABLE SALESASSOCIATE_PORTFLIOS (
ID INT PRIMARY KEY AUTO_INCREMENT,
COMPANY_ID INT NOT NULL,
DIVISION_ID INT NOT NULL,
USER_ID VARCHAR(50) NOT NULL,
START_DATE DATETIME,
END_DATE DATETIME,
IS_EXPIRED BOOLEAN DEFAULT FALSE,
IS_VOIDED BOOLEAN DEFAULT FALSE,
COMMENTS VARCHAR(200),
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (DIVISION_ID) REFERENCES DIVISIONS(ID),
FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);

CREATE TABLE SAPORTFOLIO_LINES (
ID INT PRIMARY KEY ,
COMPANY_ID INT NOT NULL,
PORTFOLIO_ID INT NOT NULL,
LINE_NUMBER INT NOT NULL,
PORTFOLIO_TYPE  VARCHAR(10) NOT NULL,
PORTFOLIO_KEY VARCHAR(10) NOT NULL,
IS_VOIDED BOOLEAN DEFAULT FALSE,
COMMENTS VARCHAR(200),
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (PORTFOLIO_TYPE) REFERENCES FINITE_VALUES(CODE)
);

CREATE TABLE BRANDS (
ID INT PRIMARY KEY AUTO_INCREMENT,
COMPANY_ID INT NOT NULL,
BRAND_CODE VARCHAR(20)  NOT NULL,
BRAND_NAME VARCHAR(50)  NOT NULL,
DESCRIPTION VARCHAR(100),
IS_DELETED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID)
);


ALTER TABLE ITEMS ADD BRAND_ID INT ;

ALTER TABLE ITEMS ADD FOREIGN KEY (BRAND_ID) REFERENCES BRANDS(ID);

_____________________________________________________________________----
15-jan-17

CREATE TABLE SALESPERIOD_ASSOCIATES (
ID INT PRIMARY KEY ,
COMPANY_ID INT NOT NULL,
SALES_PERIOD_ID INT NOT NULL,
PERIOD VARCHAR(50) NOT NULL,
LINE_NUMBER INT NOT NULL,
USER_ID VARCHAR(50) NOT NULL,
LINE_TOTAL FLOAT NOT NULL,
COMMENTS VARCHAR(200),
IS_VOIDED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
FOREIGN KEY (SALES_PERIOD_ID) REFERENCES SALES_PERIODS(ID)
);

ALTER TABLE SALES_LINES ADD USER_ID VARCHAR(50) ;

ALTER TABLE SALES_LINES ADD FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID);
_______________________________________________________________________________________--

CREATE TABLE TERRITORIES (
ID INT PRIMARY KEY ,
COMPANY_ID INT NOT NULL,
DIVISION_ID INT NOT NULL,
TERRITORY VARCHAR(50) NOT NULL,
DESCRIPTION VARCHAR(200),
IS_DELETED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (DIVISION_ID) REFERENCES DIVISIONS(ID)
);

CREATE TABLE TERRITORY_LINES(
ID INT PRIMARY KEY ,
COMPANY_ID INT NOT NULL,
LINE_NUMBER INT NOT NULL,
TERRITORY_ID INT NOT NULL,
ZIPCODE VARCHAR(50) NOT NULL,
KEY_LOCATIONS VARCHAR(200),
IS_DELETED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (TERRITORY_ID) REFERENCES TERRITORIES(ID)
);

CREATE TABLE SALESPERIOD_TERRITORIES (
ID INT PRIMARY KEY ,
COMPANY_ID INT NOT NULL,
SALES_PERIOD_ID INT NOT NULL,
PERIOD VARCHAR(50) NOT NULL,
LINE_NUMBER INT NOT NULL,
TERRITORY_ID INT NOT NULL,
LINE_TOTAL FLOAT NOT NULL,
COMMENTS VARCHAR(200),
IS_VOIDED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (TERRITORY_ID) REFERENCES TERRITORIES(ID),
FOREIGN KEY (SALES_PERIOD_ID) REFERENCES SALES_PERIODS(ID)
);


INSERT INTO FINITE_VALUE_TYPE (CODE, DESCRIPTION) VALUES ('SLSORDASS', 'SALES ORDER ASSOCIATION');

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ORDHDR','SLSORDASS','Order Header');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ORDLINE','SLSORDASS','Order Line');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ORDHDLN','SLSORDASS','Both Header and Line');


INSERT INTO CONFIG_GROUPS(GROUP_NAME) VALUE('Workforce Management');

INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('ASSSLSPERHDLIN','Associate Sales personal to','Workforce Management','FINVAL','SLSORDASS','ORDHDLN');
INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('ALLDIVACCASS','Allow all divisions access to Associates','Workforce Management','BOOL','SLSORDASS','false');
INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('ALLDIVACCGMR','Allow all divisions access to Managers','Workforce Management','BOOL','SLSORDASS','true');


ALTER TABLE SALES ADD TERRITORY_ID INT ;
ALTER TABLE SALES ADD FOREIGN KEY (TERRITORY_ID) REFERENCES TERRITORIES(ID);

ALTER TABLE SALES_LEADS ADD TERRITORY_ID INT ;
ALTER TABLE SALES_LEADS ADD FOREIGN KEY (TERRITORY_ID) REFERENCES TERRITORIES(ID);

_______________________________________________________________________________________________________________

CREATE TABLE EXPENSE_HEADS(
ID INT PRIMARY KEY ,
COMPANY_ID INT NOT NULL,
CODE VARCHAR(20) NOT NULL,
NAME VARCHAR(20) NOT NULL,
DESCRIPTION VARCHAR(200),
IS_DELETED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID)
);

CREATE TABLE EXPENSE_VOUCHERS (
ID INT PRIMARY KEY ,
COMPANY_ID INT NOT NULL,
DIVISION_ID INT NOT NULL,
DOC_NUMBER VARCHAR(50) NOT NULL,
USER_ID VARCHAR(50) NOT NULL,
EXPENSE_DATE  DATETIME NOT NULL,
SA_COMMENTS VARCHAR(250) ,
STATUS VARCHAR(10) NOT NULL,
REQ_TOTAL FLOAT ,
CORRECTED_TOTAL FLOAT ,
APPROVED_TOTAL FLOAT ,
MGR_ID VARCHAR(50),
MGR_COMMENTS VARCHAR(250) ,
IS_DELETED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (DIVISION_ID) REFERENCES DIVISIONS(ID),
FOREIGN KEY (STATUS) REFERENCES FINITE_VALUES(CODE),
FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
FOREIGN KEY (MGR_ID) REFERENCES USERS(USER_ID)
);

CREATE TABLE EXPENSEVOUCHER_DETAILS (
ID INT PRIMARY KEY ,
LINE_NUMBER INT NOT NULL,
COMPANY_ID INT NOT NULL,
EXPENSE_VOUCHER_ID INT  NOT NULL,
EXPENSE_HEAD_ID INT NOT NULL,
BILL_NUMBER VARCHAR(50),
EXPENSE_LOCATION  VARCHAR(50),
REQ_AMOUNT FLOAT ,
CORRECTED_AMOUNT FLOAT ,
APPROVED_AMOUNT FLOAT ,
SA_COMMENTS VARCHAR(200),
MGR_COMMENTS VARCHAR(200),
ATTACHMENT_FILE1 VARCHAR(200),
ATTACHMENT_FILE2 VARCHAR(200),
IS_DELETED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (EXPENSE_VOUCHER_ID) REFERENCES EXPENSE_VOUCHERS(ID),
FOREIGN KEY (EXPENSE_HEAD_ID) REFERENCES EXPENSE_HEADS(ID)
);

INSERT INTO FINITE_VALUE_TYPE (CODE, DESCRIPTION) VALUES ('EXPSTATUS', 'EXPENSE VOUCHER STATUS');

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('EXPREQ','EXPSTATUS','Requested');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('EXPCONTRD','EXPSTATUS','Countered');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('EXPAPPR','EXPSTATUS','Approved');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('EXPREJEC','EXPSTATUS','Rejected');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('EXPPEN','EXPSTATUS','Pending');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('EXPREREQ','EXPSTATUS','Re-applied');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('EXPPDCLSD','EXPSTATUS','Paid Closed');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('EXPRJCLSD','EXPSTATUS','Rejected Closed');

INSERT INTO NEXTUP_CONFIG (COMPANY_ID,PROGRAM,FIELD1_TYPE,FIELD1_WIDTH,FIELD1_VAULE,FIELD2_TYPE,FIELD2_WIDTH,FIELD2_VAULE,FIELD3_TYPE,FIELD3_WIDTH,FIELD3_VAULE,FIELD4_TYPE,FIELD4_WIDTH,FIELD4_VAULE) VALUES ( -1, 'Expense Voucher','DIVCODE',4,NULL,'CONSTANT',3,'VCH','SEQCOMP',5,NULL,NULL,NULL,NULL);
_______________________________________________________________________________________________________________

ALTER TABLE METADATA ADD COLUMN  METADATA_TYPE VARCHAR(10);
ALTER TABLE METADATA ADD COLUMN IS_DIVISION_SPEC BOOLEAN DEFAULT FALSE;
ALTER TABLE METADATA ADD FOREIGN KEY (METADATA_TYPE) REFERENCES FINITE_VALUES(CODE);

INSERT INTO FINITE_VALUE_TYPE (CODE, DESCRIPTION) VALUES ('ENTTYPE', 'TYPE OF META DATA ENTITY');

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('MASTER','ENTTYPE','Master');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('CONFIG','ENTTYPE','Config');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('TRANS','ENTTYPE','Transaction');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('REPORT','ENTTYPE','Report');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('TASK','ENTTYPE','Task');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('GRPHRPT','ENTTYPE','Graphical Report');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('DSHBOARD','ENTTYPE','Dashboard');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('BSNCNTLR','ENTTYPE','Business Controller');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('OTHER','ENTTYPE','Other');

delete from metadata;

INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC) VALUES('DIVISION','com.rainbow.crm.division.model.Division','MASTER',false);
INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC) VALUES('USER','com.rainbow.crm.user.model.User','MASTER',true);
INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC) VALUES('VENDOR','com.rainbow.crm.vendor.model.Vendor','MASTER',false);
INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC) VALUES('CUSTOMER','com.rainbow.crm.customer.model.Customer','MASTER',false);
INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC) VALUES('PRODUCT','com.rainbow.crm.product.model.Product','MASTER',false);
INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC) VALUES('SKU','com.rainbow.crm.item.model.Sku','MASTER',false);
INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC) VALUES('ITEM','com.rainbow.crm.item.model.Item','MASTER',false);
INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC) VALUES('INVENTORY','com.rainbow.crm.inventory.model.Inventory','MASTER',true);
INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC) VALUES('SALESPERIOD','com.rainbow.crm.salesperiod.model.SalesPeriod','TRANS',true);
INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC) VALUES('SALES','com.rainbow.crm.sales.model.Sales','TRANS',true);
INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC) VALUES('DO','com.rainbow.crm.distrbutionorder.model.DistributionOrder','TRANS',true);
INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC) VALUES('PURCHASE','com.rainbow.crm.purchase.model.Purchase','TRANS',true);
INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC) VALUES('SALESLEAD','com.rainbow.crm.saleslead.model.SalesLead','TRANS',true);
INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC) VALUES('WISHLIST','com.rainbow.crm.wishlist.model.WishList','TRANS',true);
INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC) VALUES('CONTACT','com.rainbow.crm.contact.model.Contact','MASTER',false);
INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC) VALUES('FOLLOWUP','com.rainbow.crm.followup.model.Followup','TRANS',false);
INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC) VALUES('ALERT','com.rainbow.crm.alert.model.Alert','TRANS',false);

INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC) VALUES('Enquiry','com.rainbow.crm.enquiry.model.Enquiry','TRANS',true);

29-jan-17

CREATE TABLE ENQUIRIES (
ID INT PRIMARY KEY AUTO_INCREMENT,
COMPANY_ID INT NOT NULL,
DIVISION_ID INT NOT NULL,
TERRITORY_ID INT,
ENQ_DATE DATETIME NOT NULL,
ENQUIRY_TYPE  VARCHAR(10),
CONTACT_ID INT,
SALES_ASSOCIATE VARCHAR(50),
ENQUIRY  BLOB,
NEAREST_SKU_ID INT,
NEAREST_ITEM_ID INT,
COMMENTS VARCHAR(200),
IS_DELETED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (DIVISION_ID) REFERENCES DIVISIONS(ID),
FOREIGN KEY (CONTACT_ID) REFERENCES CONTACTS(ID),
FOREIGN KEY (TERRITORY_ID) REFERENCES TERRITORIES(ID),
FOREIGN KEY (ENQUIRY_TYPE) REFERENCES FINITE_VALUES(CODE),
FOREIGN KEY (SALES_ASSOCIATE) REFERENCES USERS(USER_ID)
);


INSERT INTO FINITE_VALUE_TYPE (CODE, DESCRIPTION) VALUES ('ENQTYPE', 'TYPE OF ENQUIRY');

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ENQSALES','ENQTYPE','Enquiry for Sale');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ENQPRICE','ENQTYPE','Enquiry for Price');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ENQSPECS','ENQTYPE','Enquiry for Specification');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ENQAVAIL','ENQTYPE','Enquiry for Availability');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ENQOTHER','ENQTYPE','Other');



CREATE TABLE SALES_PITCHES (
ID INT PRIMARY KEY AUTO_INCREMENT,
COMPANY_ID INT NOT NULL,
DIVISION_ID INT NOT NULL,
TERRITORY_ID INT,
PITCH_DATE DATETIME NOT NULL,
PITCH_TYPE  VARCHAR(10),
CONTACT_ID INT,
CUSTOMER_ID INT,
PHONE_NUMBER VARCHAR(50),
EMAIL VARCHAR(50),
ADDRESS VARCHAR(250),
SALES_ASSOCIATE VARCHAR(50),
TITLE VARCHAR(50) NOT NULL,
DETAILS  BLOB,
ITEM_ID INT,
COMMENTS VARCHAR(200),
IS_DELETED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (DIVISION_ID) REFERENCES DIVISIONS(ID),
FOREIGN KEY (CONTACT_ID) REFERENCES CONTACTS(ID),
FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(ID),
FOREIGN KEY (TERRITORY_ID) REFERENCES TERRITORIES(ID),
FOREIGN KEY (PITCH_TYPE) REFERENCES FINITE_VALUES(CODE),
FOREIGN KEY (SALES_ASSOCIATE) REFERENCES USERS(USER_ID)
);

INSERT INTO FINITE_VALUE_TYPE (CODE, DESCRIPTION) VALUES ('PITCHTYPE', 'TYPE OF SALES PITCH');

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('PITTELP','PITCHTYPE','Telephonic call');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('PITVISIT','PITCHTYPE','Visit at client');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('PITSTOR','PITCHTYPE','Client  Visit at Premise');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('PITVDO','PITCHTYPE','Video Conference');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('PITEMAIL','PITCHTYPE','Email');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('PITOTHER','PITCHTYPE','Other');
______________________________________________________________________________________________


2-2-2007
INSERT INTO FINITE_VALUE_TYPE (CODE, DESCRIPTION) VALUES ('CARDINAL', 'TYPE OF CARDINALITY');

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ONE-ONE','CARDINAL','ONE TO ONE');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ONE-MANY','CARDINAL','ONE TO MANY');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('MANY-ONE','CARDINAL','MANY TO ONE');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('MANY-MANY','CARDINAL','MANY TO MANY');

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('DATE','CONFVALTYP','Date Values');

delete table metadata;

CREATE TABLE METADATA (
ENTITY VARCHAR(50) PRIMARY KEY,
CLASS_NAME VARCHAR(200),
METADATA_TYPE  VARCHAR(10),
IS_DIVISION_SPEC BOOLEAN DEFAULT FALSE,
HQL_CLASS VARCHAR(50), 
DESCRIPTION VARCHAR(50), 
DATE_FIELD VARCHAR(50), 
FOREIGN KEY (METADATA_TYPE) REFERENCES FINITE_VALUES(CODE)
);

INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC,HQL_CLASS) VALUES('DIVISION','com.rainbow.crm.division.model.Division','MASTER',false,'Division');
INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC,HQL_CLASS) VALUES('USER','com.rainbow.crm.user.model.User','MASTER',true,'User');
INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC,HQL_CLASS) VALUES('VENDOR','com.rainbow.crm.vendor.model.Vendor','MASTER',false,'Vendor');
INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC,HQL_CLASS) VALUES('CUSTOMER','com.rainbow.crm.customer.model.Customer','MASTER',false,'Customer');
INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC,HQL_CLASS) VALUES('PRODUCT','com.rainbow.crm.product.model.Product','MASTER',false,'Product');
INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC,HQL_CLASS) VALUES('SKU','com.rainbow.crm.item.model.Sku','MASTER',false,'Sku');
INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC,HQL_CLASS) VALUES('ITEM','com.rainbow.crm.item.model.Item','MASTER',false,'Item');
INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC,HQL_CLASS) VALUES('INVENTORY','com.rainbow.crm.inventory.model.Inventory','TRANS',true,'Inventory');
INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC,HQL_CLASS) VALUES('SALESPERIOD','com.rainbow.crm.salesperiod.model.SalesPeriod','TRANS',true,'SalesPeriod');
INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC,HQL_CLASS,DATE_FIELD) VALUES('SALES','com.rainbow.crm.sales.model.Sales','TRANS',true,'Sales','salesDate');
INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC,HQL_CLASS,DATE_FIELD) VALUES('DO','com.rainbow.crm.distrbutionorder.model.DistributionOrder','TRANS',true,'DistributionOrder','orderDate');
INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC,HQL_CLASS,DATE_FIELD) VALUES('PURCHASE','com.rainbow.crm.purchase.model.Purchase','TRANS',true,'Purchase','purchaseDate');
INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC,HQL_CLASS,DATE_FIELD) VALUES('SALESLEAD','com.rainbow.crm.saleslead.model.SalesLead','TRANS',true,'SalesLead','releasedDate');
INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC,HQL_CLASS,DATE_FIELD) VALUES('WISHLIST','com.rainbow.crm.wishlist.model.WishList','TRANS',true,'WishList','wishListDate');
INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC,HQL_CLASS) VALUES('CONTACT','com.rainbow.crm.contact.model.Contact','MASTER',false,'Contact');
INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC,HQL_CLASS) VALUES('FOLLOWUP','com.rainbow.crm.followup.model.Followup','TRANS',false,'Followup');
INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC,HQL_CLASS) VALUES('ALERT','com.rainbow.crm.alert.model.Alert','TRANS',false,'Alert');

CREATE TABLE ENTITY_FIELDS (
ENTITY VARCHAR(50) NOT NULL,
KEY_FIELD VARCHAR(50) NOT NULL,
HQL_KEY_FIELD VARCHAR(50),
DESCRIPTION VARCHAR(50), 
DATA_TYPE VARCHAR(10) NOT NULL,
FV_TYPE VARCHAR(10), 
JOIN_HQL_CLAUSE VARCHAR(150),
JOIN_HQL_CONDITION VARCHAR(150),
FOREIGN KEY (ENTITY) REFERENCES METADATA(ENTITY),
FOREIGN KEY (DATA_TYPE) REFERENCES FINITE_VALUES(CODE),
FOREIGN KEY (FV_TYPE) REFERENCES FINITE_VALUE_TYPE(CODE)
);

INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('SALESLEAD','Division Name','SalesLead.division.name','STR');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('SALESLEAD','Doc No','SalesLead.docNumber','STR');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE) values ('SALESLEAD','Customer Phone','customer.phone','STR','left outer join  SalesLead.customer customer');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE) values ('SALESLEAD','Customer First Name','customer.firstName','STR','left outer join  SalesLead.customer customer');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE) values ('SALESLEAD','Customer Last Name','customer.lastName','STR','left outer join  SalesLead.customer customer');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('SALESLEAD','Territory','SalesLead.territory.territory','STR');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('SALESLEAD','Released Date','SalesLead.releasedDate','DATE');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('SALESLEAD','Sales Won','SalesLead.salesWon','BOOL');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('SALESLEAD','Sales Bill','SalesLead.sales.billNumber','STR');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('SALESLEAD','Sales Associate','SalesLead.salesAssociate','STR');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('SALESLEAD','Sales Associate Reason','SalesLead.salesAssReasonCode.description','STR');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('SALESLEAD','Manager Reason','SalesLead.mgrReasonCode.description','STR');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE) values ('SALESLEAD','Line SKU','salesLeadLine.sku.name','STR','left outer join  SalesLead.salesLeadLines salesLeadLine');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE) values ('SALESLEAD','Price','salesLeadLine.price','NUMER','left outer join  SalesLead.salesLeadLines salesLeadLine');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE) values ('SALESLEAD','Negotiated Price','salesLeadLine.negotiatedPrice','NUMER','left outer join  SalesLead.salesLeadLines salesLeadLine');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE) values ('SALESLEAD','Qty','salesLeadLine.qty','NUMER','left outer join  SalesLead.salesLeadLines salesLeadLine');


INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('SALESPERIOD','Period','SalesPeriod.period','STR');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('SALESPERIOD','Division Name','SalesPeriod.division.name','STR');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('SALESPERIOD','From Date','SalesPeriod.fromDate','DATE');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('SALESPERIOD','To Date','SalesPeriod.toDate','DATE');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('SALESPERIOD','Total Target','SalesPeriod.totalTarget','NUMER');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE) values ('SALESPERIOD','Line Item','salesPeriodLine.item.name','STR','left outer join  SalesPeriod.salesPeriodLines salesPeriodLine');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE) values ('SALESPERIOD','Qty','salesPeriodLine.qty','NUMER','left outer join  SalesPeriod.salesPeriodLines salesPeriodLine');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE) values ('SALESPERIOD','Target Price','salesPeriodLine.targetPrice','NUMER','left outer join  SalesPeriod.salesPeriodLines salesPeriodLine');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE) values ('SALESPERIOD','Line Total','salesPeriodLine.lineTotal','NUMER','left outer join  SalesPeriod.salesPeriodLines salesPeriodLine');

INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE) values ('SALESPERIOD','Associate','salesPeriodAssociate.user.userId','STR','left outer join  SalesPeriod.salesPeriodAssociates salesPeriodAssociate');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE) values ('SALESPERIOD','Associate Target','salesPeriodAssociate.lineTotal','NUMER','left outer join  SalesPeriod.salesPeriodAssociates salesPeriodAssociate');

INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE) values ('SALESPERIOD','Territory','salesPeriodTerritory.territory.territory','STR','left outer join  SalesPeriod.salesPeriodTerritories salesPeriodTerritory');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE) values ('SALESPERIOD','Territory Target','salesPeriodTerritory.lineTotal','NUMER','left outer join  SalesPeriod.salesPeriodTerritories salesPeriodTerritory');



INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('WISHLIST','Doc Number','WishList.docNumber','STR');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('WISHLIST','Division Name','WishList.division.name','STR');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE) values ('WISHLIST','Customer Phone','customer.phone','STR','left outer join  WishList.customer customer');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE) values ('WISHLIST','Customer First Name','customer.firstName','STR','left outer join  WishList.customer customer');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('WISHLIST','Date','WishList.wishListDate','DATE');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('WISHLIST','Fullfilled','WishList.fulfilled','BOOL');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('WISHLIST','Expired','WishList.expired','BOOL');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE) values ('WISHLIST','Line SKU','wishListLine.sku.name','STR','left outer join  WishList.wishListLines wishListLine');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE) values ('WISHLIST','Desired Price','wishListLine.desiredPrice','NUMER','left outer join  WishList.wishListLines wishListLine');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE) values ('WISHLIST','Desired Qty','wishListLine.qty','NUMER','left outer join  WishList.wishListLines wishListLine');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('WISHLIST','Sales Lead Gen','WishList.salesLeadGenerated','BOOL');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('WISHLIST','Sales Lead Doc','WishList.salesLead.docNumber','STR');



INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('FOLLOWUP','Division Name','Followup.lead.division.name','STR');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('FOLLOWUP','Confidence Level','Followup.confidenceLevel.description','STR');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('FOLLOWUP','Communication Mode','Followup.communicationMode.description','STR');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('FOLLOWUP','Offered Price','Followup.offeredPrice','NUMER');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('FOLLOWUP','Sales Associate','Followup.salesAssociate','STR');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('FOLLOWUP','Next Followup','Followup.nextFollwup','DATE');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('FOLLOWUP','Final Followup','Followup.finalFollowup','BOOL');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('FOLLOWUP','Result','Followup.result.description','STR');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('FOLLOWUP','Result Reason','Followup.resultReason.description','STR');

INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('ALERT','Division Name','Alert.division.name','STR');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('ALERT','Owner Name','Alert.owner.userId','STR');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('ALERT','Raised Date','Alert.raisedDate','DATE');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('ALERT','Acknowledged Date','Alert.acknowDate','DATE');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('ALERT','Type','Alert.type.description','STR');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('ALERT','Status','Alert.status.description','STR');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('ALERT','Raised By','Alert.raisedBy','STR');




INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('INVENTORY','Division Name','Inventory.division.name','STR');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('INVENTORY','SKU','Inventory.sku.name','STR');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('INVENTORY','Item','Inventory.sku.item.name','STR');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('INVENTORY','Opening Qty','Inventory.opQty','NUMER');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('INVENTORY','Current Qty','Inventory.currentQty','NUMER');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('INVENTORY','Damaged Qty','Inventory.damagedQty','NUMER');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('INVENTORY','Reserved Qty','Inventory.reservedQty','NUMER');


INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('SALES','Bill Number','Sales.billNumber','STR');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('SALES','Division Name','Sales.division.name','STR');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE,JOIN_HQL_CONDITION) values ('SALES','Customer Phone','customer.phone','STR','left outer join  Sales.customer customer',' 1= 1 ');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE,JOIN_HQL_CONDITION) values ('SALES','Customer First Name','customer.firstName','STR','left outer join  Sales.customer customer',' 1= 1');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE,JOIN_HQL_CONDITION) values ('SALES','Sales Line Associate','salesLine.user.userId','STR','left outer join  Sales.salesLines salesLine',' 1=1 ');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('SALES','Sales Net Amount','Sales.netAmount','NUMER');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE) values ('SALES','Sales Line Total','salesLine.lineTotal','NUMER','left outer join  Sales.salesLines salesLine');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE) values ('SALES','Sales Line SKU','salesLine.sku.name','STR','left outer join  Sales.salesLines salesLine');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE) values ('SALES','Sales Line Qty','salesLine.qty','NUMER','left outer join  Sales.salesLines salesLine');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE) values ('SALES','Sales Line Price','salesLine.unitPrice','NUMER','left outer join  Sales.salesLines salesLine');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,FV_TYPE) values ('SALES','Order Type','Sales.orderType.code','FINVAL','SLORDTYPE');

INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('PURCHASE','Bill Number','Purchase.billNumber','STR');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('PURCHASE','Doc Number','Purchase.docNumber','STR');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('PURCHASE','Division Name','Purchase.division.name','STR');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('PURCHASE','Vendor Name','Purchase.vendor.name','STR');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('PURCHASE','Date','Purchase.purchaseDate','DATE');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('PURCHASE','Settled','Purchase.settled','BOOL');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('PURCHASE','Total Discount','Purchase.totalDisc','NUMER');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('PURCHASE','Net Amount','Purchase.netAmount','NUMER');

INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE) values ('PURCHASE','Purchase Line SKU','purchaseLine.sku.name','STR','left outer join  Purchase.purchaseLines purchaseLine');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE) values ('PURCHASE','Purchase Line Qty','purchaseLine.qty','NUMER','left outer join  Purchase.purchaseLines purchaseLine');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE) values ('PURCHASE','Purchase Line Price','purchaseLine.unitPrice','NUMER','left outer join  Purchase.purchaseLines purchaseLine');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE) values ('PURCHASE','Purchase Line Total','purchaseLine.lineTotal','NUMER','left outer join  Purchase.purchaseLines purchaseLine');




INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('DO','Doc Number','DistributionOrder.docNumber','STR');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('DO','Division Name','DistributionOrder.division.name','STR');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE) values ('DO','Customer Phone','customer.phone','STR','left outer join  DistributionOrder.customer customer');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE) values ('DO','Customer First Name','customer.firstName','STR','left outer join  DistributionOrder.customer customer');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('DO','Carrier Name','DistributionOrder.carrier.name','STR');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('DO','Carrier Code','DistributionOrder.carrier.code','STR');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('DO','Order Date','DistributionOrder.orderDate','DATE');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('DO','Pack Date','DistributionOrder.packDate','DATE');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('DO','Shipping Date','DistributionOrder.shippingDate','DATE');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('DO','Shipping Charges','DistributionOrder.shippingCharges','NUMER');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('DO','User','DistributionOrder.user.userId','STR');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE) values ('DO','Sales Bill','DistributionOrder.sales.billNumber','STR');

INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE) values ('DO','DO Line SKU','doLine.sku.name','STR','left outer join  DistributionOrder.distributionOrderLines doLine');
INSERT INTO ENTITY_FIELDS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE) values ('DO','DO Line Qty','doLine.qty','NUMER','left outer join  DistributionOrder.distributionOrderLines doLine');











CREATE TABLE ENTITY_RELATION (
PRIMARY_ENTITY VARCHAR(50) NOT NULL,
SECONDARY_ENTITY VARCHAR(50) NOT NULL,
CARDINALITY VARCHAR(10) NOT NULL,
HQL_JOIN_CONDITION VARCHAR(150), 
DESCRIPTION VARCHAR(50), 
FOREIGN KEY (PRIMARY_ENTITY) REFERENCES METADATA(ENTITY),
FOREIGN KEY (SECONDARY_ENTITY) REFERENCES METADATA(ENTITY),
FOREIGN KEY (CARDINALITY) REFERENCES FINITE_VALUES(CODE)
);



INSERT INTO FINITE_VALUE_TYPE (CODE, DESCRIPTION) VALUES ('TENDERTYPE', 'TYPE OF PAYMENT');

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('CASH','TENDERTYPE','Cash');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('CREDITCARD','TENDERTYPE','Credit Card');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('DEBITCARD','TENDERTYPE','Debit Card');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('STRCRED','TENDERTYPE','Store Credit');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('GIFTCARD','TENDERTYPE','Gift Card');

INSERT INTO NEXTUP_CONFIG (COMPANY_ID,PROGRAM,FIELD1_TYPE,FIELD1_WIDTH,FIELD1_VAULE,FIELD2_TYPE,FIELD2_WIDTH,FIELD2_VAULE,FIELD3_TYPE,FIELD3_WIDTH,FIELD3_VAULE,FIELD4_TYPE,FIELD4_WIDTH,FIELD4_VAULE) VALUES ( -1, 'SalesReturns','DIVCODE',4,NULL,'CONSTANT',3,'RTN','SEQCOMP',5,NULL,NULL,NULL,NULL);


ALTER TABLE SALES_LINES  ADD IS_RETURN_LINE BOOLEAN DEFAULT FALSE;
ALTER TABLE SALES_LINES  ADD RETURN_PRICE FLOAT;
ALTER TABLE SALES_LINES  ADD ORIGINAL_PRICE FLOAT;
ALTER TABLE SALES_LINES  ADD ORIGINAL_QTY INT;

ALTER TABLE SALES ADD IS_RETURN BOOLEAN DEFAULT FALSE;
ALTER TABLE SALES ADD  ORIGINAL_SALES_ID INT;
ALTER TABLE SALES ADD  ORIGINAL_BILL_NUMBER VARCHAR(50);

4-4-17


CREATE TABLE QUERIES (
ID INT PRIMARY KEY AUTO_INCREMENT,
COMPANY_ID INT NOT NULL,
DIVISION_ID INT ,
OWNER VARCHAR(50),
NAME VARCHAR(50) NOT NULL,
ENTITY VARCHAR(50) NOT NULL,
FROM_DATE DATETIME,
TO_DATE DATETIME,
FROM_CRITERIA VARCHAR(10),
TO_CRITERIA VARCHAR(10),
DATE_VALUE_TYPE VARCHAR(5),
RESULT_TYPE VARCHAR(30),
SELECTED_FIELDS BLOB, 
SORT_FIELD VARCHAR(50),
SORT_DESC VARCHAR(10),
DATE_EXCLUDED BOOLEAN,
GROUP_BY VARCHAR(50),
AGGREGATION_FIELD VARCHAR(50),
AGGREGATION_TYPE VARCHAR(30),
IS_DELETED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (DIVISION_ID) REFERENCES DIVISIONS(ID),
FOREIGN KEY (OWNER) REFERENCES USERS(USER_ID),
FOREIGN KEY (FROM_CRITERIA) REFERENCES FINITE_VALUES(CODE),
FOREIGN KEY (TO_CRITERIA) REFERENCES FINITE_VALUES(CODE)
);

CREATE TABLE QUERY_CONDITION (
ID INT PRIMARY KEY AUTO_INCREMENT,
LINE_NUMBER INT ,
COMPANY_ID INT NOT NULL,
QUERY_ID INT NOT NULL,
NO_OPEN_BRACKETS INT,
NO_CLOSE_BRACKETS INT,
POST_CONDITION VARCHAR(10),
DATA_TYPE VARCHAR(10),
IS_DELETED BOOLEAN DEFAULT FALSE,
FIELD VARCHAR(50),
OPERATOR VARCHAR(10),
VALUE  VARCHAR(50),
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (QUERY_ID) REFERENCES QUERIES(ID),
FOREIGN KEY (DATA_TYPE) REFERENCES FINITE_VALUES(CODE)
);

DROP TABLE CUSTOMER_CATEGORIES;

CREATE TABLE CUSTOMER_CATEGORIES (
ID INT PRIMARY KEY AUTO_INCREMENT,
COMPANY_ID INT NOT NULL,
DIVISION_ID INT,
NAME VARCHAR(50) NOT NULL,
EVAL_FROM VARCHAR(10) NOT NULL,
EVAL_TO VARCHAR(10) NOT NULL,
INCLUDE_RETURNS BOOLEAN DEFAULT FALSE,
COMMENTS VARCHAR(200),
IS_DELETED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (EVAL_FROM) REFERENCES FINITE_VALUES(CODE),
FOREIGN KEY (EVAL_TO) REFERENCES FINITE_VALUES(CODE),
FOREIGN KEY (DIVISION_ID) REFERENCES DIVISIONS(ID)
);

CREATE TABLE CUSTOMER_CATEGORY_CONDITION (
ID INT PRIMARY KEY AUTO_INCREMENT,
LINE_NUMBER INT ,
COMPANY_ID INT NOT NULL,
CUSTOMER_CATEGORY_ID INT NOT NULL,
NO_OPEN_BRACKETS INT,
NO_CLOSE_BRACKETS INT,
POST_CONDITION VARCHAR(10),
DATA_TYPE VARCHAR(10),
IS_DELETED BOOLEAN DEFAULT FALSE,
FIELD VARCHAR(50),
OPERATOR VARCHAR(10),
VALUE  VARCHAR(50),
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (CUSTOMER_CATEGORY_ID) REFERENCES CUSTOMER_CATEGORIES(ID),
FOREIGN KEY (DATA_TYPE) REFERENCES FINITE_VALUES(CODE)
);


CREATE TABLE CUST_CATEGORY_COMPONENTS (
ENTITY VARCHAR(50) NOT NULL  ,
KEY_FIELD VARCHAR(50) NOT NULL ,
HQL_KEY_FIELD VARCHAR(50) NOT NULL  ,
DATA_TYPE VARCHAR(10),
JOIN_HQL_CLAUSE VARCHAR(50), 
IS_AGGREGATED_FIELD BOOLEAN DEFAULT FALSE,
PRECONDITION_FIELD VARCHAR(50) ,
FOREIGN KEY (DATA_TYPE) REFERENCES FINITE_VALUES(CODE)
);


INSERT INTO CUST_CATEGORY_COMPONENTS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,IS_AGGREGATED_FIELD) values ('SALES','Sum - Sales Net Amount','sum(Sales.netAmount)','NUMER',true);
INSERT INTO CUST_CATEGORY_COMPONENTS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,IS_AGGREGATED_FIELD) values ('SALES','Max - Sales Net Amount','max(Sales.netAmount)','NUMER',true);
INSERT INTO CUST_CATEGORY_COMPONENTS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,IS_AGGREGATED_FIELD) values ('SALES','Avg - Sales Net Amount','avg(Sales.netAmount)','NUMER',true);
INSERT INTO CUST_CATEGORY_COMPONENTS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,IS_AGGREGATED_FIELD) values ('SALES','Count - Sales Net Amount','count(Sales.netAmount)','NUMER',true);

INSERT INTO CUST_CATEGORY_COMPONENTS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,IS_AGGREGATED_FIELD) values ('SALES','Order Type','Sales.orderType.code','FINVAL',false);
INSERT INTO CUST_CATEGORY_COMPONENTS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE,IS_AGGREGATED_FIELD) values ('SALES','Sales Line SKU','salesLine.sku.name','STR','left outer join  Sales.salesLines salesLine',false);
INSERT INTO CUST_CATEGORY_COMPONENTS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE,IS_AGGREGATED_FIELD) values ('SALES','Sales Line Brand','salesLine.sku.item.brand.name','STR','left outer join  Sales.salesLines salesLine',false);
INSERT INTO CUST_CATEGORY_COMPONENTS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE,IS_AGGREGATED_FIELD) values ('SALES','Sales Line Category','salesLine.sku.product.category.name','STR','left outer join  Sales.salesLines salesLine',false);
INSERT INTO CUST_CATEGORY_COMPONENTS (ENTITY , KEY_FIELD , HQL_KEY_FIELD,DATA_TYPE,JOIN_HQL_CLAUSE,IS_AGGREGATED_FIELD) values ('SALES','Sales Line Product','salesLine.sku.product.name','STR','left outer join  Sales.salesLines salesLine',false);

delete from COMPANY_CONFIGURATION where config_code like 'IMGSRV%';
delete from base_configuration where CODE like 'IMGSRV%';

CREATE TABLE DOCUMENTS (
ID INT PRIMARY KEY AUTO_INCREMENT,
COMPANY_ID INT NOT NULL,
DOC_TYPE VARCHAR(10) NOT NULL,
DOC_NAME VARCHAR(50) NOT NULL,
DOC_PATH VARCHAR(200) NOT NULL,
ITEM_ID INT,
CUSTOMER_ID INT ,
SALES_LEAD_ID INT,
SALES_ID INT,
OWNER VARCHAR(50),
COMMENTS VARCHAR(200),
IS_DELETED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (ITEM_ID) REFERENCES ITEMS(ID),
FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(ID),
FOREIGN KEY (SALES_LEAD_ID) REFERENCES SALES_LEADS(ID),
FOREIGN KEY (SALES_ID) REFERENCES SALES(ID),
FOREIGN KEY (OWNER) REFERENCES USERS(USER_ID),
FOREIGN KEY (DOC_TYPE) REFERENCES FINITE_VALUES(CODE)
);

INSERT INTO FINITE_VALUE_TYPE (CODE, DESCRIPTION) VALUES ('DOCTYPE', 'TYPE OF DOCUMENT');

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('DOCWORD','DOCTYPE','Microsoft Word');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('DOCEXCEL','DOCTYPE','Microsoft Excel');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('DOCPDF','DOCTYPE','PDF');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('DOCKPPT','DOCTYPE','Microsoft Power Point');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('DOCTXT','DOCTYPE','Text Document');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('DOCIMG','DOCTYPE','Image File');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('DOCZIP','DOCTYPE','Compressed File');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('DOCOTHER','DOCTYPE','Other');

ALTER TABLE FOLLOWUPS ADD FOLLOWUP_DATE DATETIME NOT NULL; 
UPDATE FOLLOWUPS SET FOLLOWUP_DATE = CREATED_DATE;
____________________________________________________________________________

ALTER TABLE SALES_LEADS ADD REF_NUMBER VARCHAR(50)  ;
ALTER TABLE SALES_LEADS ADD REF_DATE DATETIME  ;
ALTER TABLE SALES_LEADS ADD REFERRAL_ID INT  ;
ALTER TABLE SALES_LEADS ADD FOREIGN KEY (REFERRAL_ID) REFERENCES CONTACTS(ID);

ALTER TABLE CUSTOMERS ADD PHOTO  VARCHAR(50);
ALTER TABLE CUSTOMERS ADD LOYALTY_POINT FLOAT;

update base_configuration set config_description='Loyalty points required to redeem unit discount' where code ='RDMLOYALTY'

CREATE TABLE CUSTOMER_LOYALTY_POINTS(
ID INT PRIMARY KEY AUTO_INCREMENT,
COMPANY_ID INT NOT NULL,
CUSTOMER_ID INT NOT NULL,
DIVISION_ID INT NOT NULL,
SALES_ID INT ,
REDEEMED BOOLEAN DEFAULT FALSE,
POINTS FLOAT NOT NULL,
REDEEMED_AMOUNT FLOAT,
COMMENTS VARCHAR(200),
IS_DELETED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(ID),
FOREIGN KEY (SALES_ID) REFERENCES SALES(ID),
FOREIGN KEY (DIVISION_ID) REFERENCES DIVISIONS(ID)
);


ALTER TABLE SALES ADD LOYALTY_REDEMMED FLOAT;
ALTER TABLE SALES ADD LOYALTY_DISCOUNT FLOAT;

ALTER TABLE LOGIN_RECORDS ADD IS_MOBILE_LOGIN BOOLEAN DEFAULT FALSE ;
ALTER TABLE LOGIN_RECORDS ADD MOBILE_NOTIFICATION_ID  BLOB ;

CREATE TABLE TOPICS (
ID INT PRIMARY KEY AUTO_INCREMENT,
COMPANY_ID INT NOT NULL,
DIVISION_ID INT NOT NULL,
REF_NO VARCHAR(50) NOT NULL, 
TOPIC_DATE DATETIME,
OWNER VARCHAR(50) NOT NULL,
PORTFOLIO_TYPE  VARCHAR(10) NOT NULL,
PORTFOLIO_KEY VARCHAR(10) NOT NULL,
TITLE VARCHAR(50) NOT NULL,
QUESTION BLOB NOT NULL,
CLOSED BOOLEAN DEFAULT FALSE,
SALE_MADE BOOLEAN ,
SALES_ID INT, 
COMMENTS VARCHAR(200),
IS_DELETED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (OWNER) REFERENCES USERS(USER_ID),
FOREIGN KEY (DIVISION_ID) REFERENCES DIVISIONS(ID),
FOREIGN KEY (PORTFOLIO_TYPE) REFERENCES FINITE_VALUES(CODE),
FOREIGN KEY (SALES_ID) REFERENCES SALES(ID)
);

CREATE TABLE TOPIC_LINES (
ID INT PRIMARY KEY AUTO_INCREMENT,
COMPANY_ID INT NOT NULL,
TOPIC_ID INT NOT NULL,
LINE_NUMBER INT NOT NULL,
REPLY BLOB NOT NULL,
REPLIED_BY VARCHAR(50) NOT NULL,
REPLY_USEFUL BOOLEAN DEFAULT FALSE ,
REPLY_DATE  DATETIME,
COMMENTS VARCHAR(200),
IS_DELETED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (TOPIC_ID) REFERENCES TOPICS(ID),
FOREIGN KEY (REPLIED_BY) REFERENCES USERS(USER_ID)
);



INSERT INTO NEXTUP_CONFIG (COMPANY_ID,PROGRAM,FIELD1_TYPE,FIELD1_WIDTH,FIELD1_VAULE,FIELD2_TYPE,FIELD2_WIDTH,FIELD2_VAULE,FIELD3_TYPE,FIELD3_WIDTH,FIELD3_VAULE,FIELD4_TYPE,FIELD4_WIDTH,FIELD4_VAULE) VALUES ( -1, 'Discussion Topics','DIVCODE',4,NULL,'CONSTANT',3,'TPC','SEQCOMP',5,NULL,NULL,NULL,NULL);
CREATE TABLE PROMOTIONS (
ID INT PRIMARY KEY AUTO_INCREMENT,
COMPANY_ID INT NOT NULL,
DIVISION_ID INT ,
NAME VARCHAR(50) NOT NULL,
PROMO_TYPE VARCHAR(10) NOT NULL,
FOR_ALL  BOOLEAN DEFAULT FALSE,
REQ_AMT FLOAT,
PROMOTED_DISC_PERCENT FLOAT,
CUST_CATEGORY INT,
START_DT  DATETIME,
END_DT DATETIME,
IS_ACTIVE BOOLEAN DEFAULT FALSE,
COMMENTS VARCHAR(200),
IS_DELETED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (DIVISION_ID) REFERENCES DIVISIONS(ID),
FOREIGN KEY (CUST_CATEGORY) REFERENCES CUSTOMER_CATEGORIES(ID),
FOREIGN KEY (PROMO_TYPE) REFERENCES FINITE_VALUES(CODE)
);

CREATE TABLE PROMOTION_LINES (
ID INT PRIMARY KEY AUTO_INCREMENT,
COMPANY_ID INT NOT NULL,
PROMOTION_ID INT NOT NULL,
LINE_NUMBER INT NOT NULL,
MASTER_POSTFOLIO_TYPE  VARCHAR(10),
MASTER_PORTFOLIO_KEY VARCHAR(10) ,
CHILD_POSTFOLIO_TYPE  VARCHAR(10) ,
CHILD_PORTFOLIO_KEY VARCHAR(10) ,
REQ_QTY FLOAT ,
PROMOTED_QTY FLOAT,
REQ_AMT FLOAT ,
PROMOTED_DISC_PERCENT FLOAT,
COMMENTS VARCHAR(200),
IS_DELETED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (PROMOTION_ID) REFERENCES PROMOTIONS(ID),
FOREIGN KEY (MASTER_POSTFOLIO_TYPE) REFERENCES FINITE_VALUES(CODE),
FOREIGN KEY (CHILD_POSTFOLIO_TYPE) REFERENCES FINITE_VALUES(CODE)
);


INSERT INTO FINITE_VALUE_TYPE (CODE, DESCRIPTION) VALUES ('PROMOTYPE', 'TYPE OF PROMOTION');

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('CRSSSELL','PROMOTYPE','Cross Selling');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('UPSELL','PROMOTYPE','Up Selling');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('BNDL','PROMOTYPE','Bundling');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('PLNDISC','PROMOTYPE','Plain Discount');

ALTER TABLE SALES_LINES ADD  PROMOTION_ID INT;
ALTER TABLE SALES_LINES ADD  IS_MASTER_LINE  BOOLEAN DEFAULT FALSE;
ALTER TABLE SALES_LINES ADD  IS_CHILD_LINE  BOOLEAN DEFAULT FALSE;
ALTER TABLE SALES_LINES ADD  MASTER_LINE_ID INT;


CREATE TABLE SALESPERIOD_BRANDS (
ID INT PRIMARY KEY ,
COMPANY_ID INT NOT NULL,
SALES_PERIOD_ID INT NOT NULL,
PERIOD VARCHAR(50) NOT NULL,
LINE_NUMBER INT NOT NULL,
BRAND_ID INT NOT NULL,
LINE_TOTAL FLOAT NOT NULL,
COMMENTS VARCHAR(200),
IS_VOIDED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (BRAND_ID) REFERENCES BRANDS(ID),
FOREIGN KEY (SALES_PERIOD_ID) REFERENCES SALES_PERIODS(ID)
);

CREATE TABLE SALESPERIOD_CATEGORIES (
ID INT PRIMARY KEY ,
COMPANY_ID INT NOT NULL,
SALES_PERIOD_ID INT NOT NULL,
PERIOD VARCHAR(50) NOT NULL,
LINE_NUMBER INT NOT NULL,
CATEGORY_ID INT NOT NULL,
LINE_TOTAL FLOAT NOT NULL,
COMMENTS VARCHAR(200),
IS_VOIDED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORIES(ID),
FOREIGN KEY (SALES_PERIOD_ID) REFERENCES SALES_PERIODS(ID)
);

CREATE TABLE SALESPERIOD_PRODUCTS (
ID INT PRIMARY KEY ,
COMPANY_ID INT NOT NULL,
SALES_PERIOD_ID INT NOT NULL,
PERIOD VARCHAR(50) NOT NULL,
LINE_NUMBER INT NOT NULL,
PRODUCT_ID INT NOT NULL,
LINE_TOTAL FLOAT NOT NULL,
COMMENTS VARCHAR(200),
IS_VOIDED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(ID),
FOREIGN KEY (SALES_PERIOD_ID) REFERENCES SALES_PERIODS(ID)
);


ALTER TABLE  SALES_LEADS ADD FINAL_DATE DATETIME;

INSERT INTO CONFIG_GROUPS(GROUP_NAME) VALUE('Authorizations');

UPDATE BASE_CONFIGURATION SET CONFIG_GROUP ='Authorizations' where  CODE in ('CONFPRIVIL','ANLREPPRIVIL','TRGSETPRIV','ALLDIVACCASS','ALLDIVACCGMR')
INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC,HQL_CLASS) VALUES('TERRITORY','com.rainbow.crm.territory.model.Territory','MASTER',true,'Territory');

DELETE FROM COMPANY_CONFIGURATION;

DELETE FROM BASE_CONFIGURATION WHERE CONFIG_GROUP ='Authorizations';


INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('CONFPRIVIL','Allow Administration access to','Authorizations','FINVAL','USRPRIVTYP','ADMUSR');

INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('ANLREPPRIVIL','Show Analytical reports to','Authorizations','FINVAL','USRPRIVTYP','MGRUSR');
INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('TRGSETPRIV','Show Sales Planning to','Authorizations','FINVAL','USRPRIVTYP','MGRUSR');
INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,DEFAULT_VALUE)
values ('ALLDIVACCASS','Allow all divisions access to Associates','Authorizations','BOOL','false');
INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,DEFAULT_VALUE)
values ('ALLDIVACCGMR','Allow all divisions access to Managers','Authorizations','BOOL','true');

INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('REPVIEWPRIV','Show Reports to','Authorizations','FINVAL','USRPRIVTYP','MGRUSR');

28-6-2017
ALTER TABLE EXPENSEVOUCHER_DETAILS ADD FILE_PATH VARCHAR(100);

INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('MERCHPRIVIL','Allow Merchandise creation access to','Authorizations','FINVAL','USRPRIVTYP','ADMUSR');

30-6-2017
INSERT INTO FINITE_VALUE_TYPE (CODE, DESCRIPTION) VALUES ('REASTYPE', 'TYPE OF REASON');

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('FVSLREAS','REASTYPE','Favorable Sales Lead Reason');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('UNFVSLREAS','REASTYPE','Unfavorable Sales Lead Reason');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('PSFBREAS','REASTYPE','Positive Feedback Reason');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('NGFBREAS','REASTYPE','Negative Feedback Reason');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('SRVRQREAS','REASTYPE','Service Request Reason');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('DISCREAS','REASTYPE','Excessive Discount Reason');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('EXPRJREAS','REASTYPE','Expense Rejection Reason');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('EXPAPREAS','REASTYPE','Expense Approval Reason');

CREATE TABLE REASON_CODES  (
ID INT PRIMARY KEY AUTO_INCREMENT,
COMPANY_ID INT ,
REASON VARCHAR(50) NOT NULL,
DESCRIPTION VARCHAR(150),
REASON_TYPE VARCHAR(10) NOT NULL,
FACTOR_TYPE VARCHAR(10) NOT NULL,
ACCESSIBLE_BY VARCHAR(10) NOT NULL,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (REASON_TYPE) REFERENCES FINITE_VALUES(CODE),
FOREIGN KEY (FACTOR_TYPE) REFERENCES FINITE_VALUES(CODE),
FOREIGN KEY (ACCESSIBLE_BY) REFERENCES FINITE_VALUES(CODE)
);

INSERT INTO FINITE_VALUE_TYPE (CODE, DESCRIPTION) VALUES ('FACTTYPE', 'FACTOR TYPE');

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('INTFACT','FACTTYPE','Internal');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('EXTFACT','FACTTYPE','External');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('NAFACT','FACTTYPE','Not Applicable');

INSERT INTO METADATA(ENTITY,CLASS_NAME,METADATA_TYPE ,IS_DIVISION_SPEC,HQL_CLASS,DATE_FIELD) VALUES('EXPENSE VOUCHER','com.rainbow.crm.expensevoucher.model.ExpenseVoucher','TRANS',true,'ExpenseVoucher','expenseDate');
________________________________________________________________________________________________________________________
1- jul - 18

INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('FDBKDAY','Days after which feedback to be sought','Workforce Management','NUMER',null,'14');

INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('FDBKOWNR','Generate  Feedback alerts to','Workforce Management','FINVAL','USRPRIVTYP','ALLUSR');

INSERT INTO FINITE_VALUE_TYPE (CODE, DESCRIPTION) VALUES ('FDBACKON', 'FEEDBACK ON');

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('FDBKSLSLN','FDBACKON','Sales Line');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('FDBKSLASS','FDBACKON','Associate');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('FDBKOVRLL','FDBACKON','Overall');

CREATE TABLE FEEDBACKS (
ID INT PRIMARY KEY AUTO_INCREMENT,
COMPANY_ID INT NOT NULL,
DIVISION_ID INT NOT NULL,
DOC_NO VARCHAR(50) NOT NULL, 
CUSTOMER_ID INT ,
FDBACK_DATE DATETIME,
CAPTURED_BY VARCHAR(50) NOT NULL,
SALES_ID INT NOT NULL,
COMM_MODE VARCHAR(10) NOT NULL,
COMMENTS VARCHAR(200),
IS_DELETED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (CAPTURED_BY) REFERENCES USERS(USER_ID),
FOREIGN KEY (DIVISION_ID) REFERENCES DIVISIONS(ID),
FOREIGN KEY (COMM_MODE) REFERENCES FINITE_VALUES(CODE),
FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(ID),
FOREIGN KEY (SALES_ID) REFERENCES SALES(ID)
);



CREATE TABLE FEEDBACK_LINES (
ID INT PRIMARY KEY AUTO_INCREMENT,
COMPANY_ID INT NOT NULL,
FEEDBACK_ID INT NOT NULL,
LINE_NUMBER INT NOT NULL,
FEEDBACK_ON VARCHAR(10) NOT NULL,
OBJECT_ID VARCHAR(50) ,
SKU_ID INT,
ASSOCIATE_ID VARCHAR(50),
RATING INT ,
REASON_CODE_ID INT NOT NULL,
COMMENTS VARCHAR(200),
IS_DELETED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (FEEDBACK_ID) REFERENCES FEEDBACKS(ID),
FOREIGN KEY (FEEDBACK_ON) REFERENCES FINITE_VALUES(CODE),
FOREIGN KEY (SKU_ID) REFERENCES SKUS(ID),
FOREIGN KEY (ASSOCIATE_ID) REFERENCES USERS(USER_ID),
FOREIGN KEY (REASON_CODE_ID) REFERENCES REASON_CODES(ID)
);

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ALTFDBK','ALTTYPE','Feedback Alert');

ALTER TABLE  SALES ADD  FEEDBACK_ALERTED BOOLEAN DEFAULT FALSE;
ALTER TABLE  SALES ADD  FEEDBACK_CAPTURED BOOLEAN DEFAULT FALSE;

INSERT INTO NEXTUP_CONFIG (COMPANY_ID,PROGRAM,FIELD1_TYPE,FIELD1_WIDTH,FIELD1_VAULE,FIELD2_TYPE,FIELD2_WIDTH,FIELD2_VAULE,FIELD3_TYPE,FIELD3_WIDTH,FIELD3_VAULE,FIELD4_TYPE,FIELD4_WIDTH,FIELD4_VAULE) VALUES ( -1, 'FeedBack','DIVCODE',4,NULL,'CONSTANT',3,'FDBK','SEQCOMP',5,NULL,NULL,NULL,NULL);


ALTER TABLE FOLLOWUPS DROP COLUMN RESULT_REASON;
ALTER TABLE FOLLOWUPS ADD COLUMN RESULT_REASON INT ;
ALTER TABLE FOLLOWUPS ADD FOREIGN KEY (RESULT_REASON) REFERENCES REASON_CODES(ID);

ALTER TABLE `crmsaas`.`sales_leads` 
DROP FOREIGN KEY `sales_leads_ibfk_6`,
DROP FOREIGN KEY `sales_leads_ibfk_5`;
ALTER TABLE `crmsaas`.`sales_leads` 
DROP INDEX `SALESASS_REASON_CODE` ,
DROP INDEX `MGR_REASON_CODE` ;

ALTER TABLE SALES_LEADS DROP COLUMN MGR_REASON_CODE;
ALTER TABLE SALES_LEADS DROP COLUMN SALESASS_REASON_CODE;

ALTER TABLE SALES_LEADS ADD COLUMN MGR_REASON_ID INT;
ALTER TABLE SALES_LEADS ADD COLUMN SALESASS_REASON_ID INT;
ALTER TABLE SALES_LEADS ADD FOREIGN KEY (MGR_REASON_ID) REFERENCES REASON_CODES(ID);
ALTER TABLE SALES_LEADS ADD FOREIGN KEY (SALESASS_REASON_ID) REFERENCES REASON_CODES(ID);

6-jul-17

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('SLSLDREAS','REASTYPE','Sales Lead Reason');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('FDBREAS','REASTYPE','Feedback Reason');

, PSFBREAS , NGFBREAS

UPDATE REASON_CODES SET REASON_TYPE= 'SLSLDREAS' WHERE REASON_TYPE IN ('FVSLREAS' , 'UNFVSLREAS');

UPDATE REASON_CODES SET REASON_TYPE= 'FDBREAS' WHERE REASON_TYPE IN ('PSFBREAS' , 'NGFBREAS');

delete from finite_values where code in ('FVSLREAS' , 'UNFVSLREAS','PSFBREAS' , 'NGFBREAS');


INSERT INTO FINITE_VALUE_TYPE (CODE, DESCRIPTION) VALUES ('BUSORIEN', 'BUSINESS ORIENTATION');

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('POSIT','BUSORIEN','Positive');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('NEGAT','BUSORIEN','Negative');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('NOTAPP','BUSORIEN','Not Applicable');

ALTER TABLE REASON_CODES ADD COLUMN  ORIENTATION VARCHAR(10) NOT NULL DEFAULT NOTAPP;
ALTER TABLE REASON_CODES ADD FOREIGN KEY (ORIENTATION) REFERENCES FINITE_VALUES(CODE);

ALTER TABLE PROMOTIONS ADD COLUMN ITEM_CLASS VARCHAR(10);
ALTER TABLE PROMOTIONS ADD FOREIGN KEY (ITEM_CLASS) REFERENCES FINITE_VALUES(CODE);


13-jun-17
INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('FDBKRTNGMRK','Feedback Rating Benchmark','General','NUMER',null,'8');

ALTER TABLE REASON_CODES ADD USE_FOR_SWOT BOOLEAN DEFAULT FALSE;

16- jul-17

CREATE TABLE CORP_SALES_PERIODS (
ID INT PRIMARY KEY ,
COMPANY_ID INT NOT NULL,
PERIOD VARCHAR(50) NOT NULL,
DESCRIPTION VARCHAR(200),
FROM_DATE DATETIME,
TO_DATE DATETIME,
ADDITIONAL_TARGET FLOAT, 
TOTAL_TARGET FLOAT, 
IS_VOIDED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
IS_START_ALERTED BOOLEAN DEFAULT FALSE,
IS_END_ALERTED BOOLEAN DEFAULT FALSE,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID)
);

CREATE TABLE CORP_SALESPERIOD_DIVISIONS (
ID INT PRIMARY KEY ,
COMPANY_ID INT NOT NULL,
CORP_SALES_PERIOD_ID INT NOT NULL,
PERIOD VARCHAR(50) NOT NULL,
LINE_NUMBER INT NOT NULL,
DIVISION_ID INT NOT NULL,
LINE_TOTAL FLOAT NOT NULL,
COMMENTS VARCHAR(200),
IS_VOIDED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (CORP_SALES_PERIOD_ID) REFERENCES CORP_SALES_PERIODS(ID),
FOREIGN KEY (DIVISION_ID) REFERENCES DIVISIONS(ID)
);

CREATE TABLE CORP_SALESPERIOD_LINES (
ID INT PRIMARY KEY ,
COMPANY_ID INT NOT NULL,
CORP_SALES_PERIOD_ID INT NOT NULL,
PERIOD VARCHAR(50) NOT NULL,
LINE_NUMBER INT NOT NULL,
SKU_ID INT NOT NULL,
TARGET_QTY INT NOT NULL,
TARGET_PRICE FLOAT NOT NULL,
LINE_TOTAL FLOAT NOT NULL,
COMMENTS VARCHAR(200),
IS_VOIDED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (SKU_ID) REFERENCES SKUS(ID),
FOREIGN KEY (CORP_SALES_PERIOD_ID) REFERENCES CORP_SALES_PERIODS(ID)
);

CREATE TABLE CORP_SALESPERIOD_BRANDS (
ID INT PRIMARY KEY ,
COMPANY_ID INT NOT NULL,
CORP_SALES_PERIOD_ID INT NOT NULL,
PERIOD VARCHAR(50) NOT NULL,
LINE_NUMBER INT NOT NULL,
BRAND_ID INT NOT NULL,
LINE_TOTAL FLOAT NOT NULL,
COMMENTS VARCHAR(200),
IS_VOIDED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (BRAND_ID) REFERENCES BRANDS(ID),
FOREIGN KEY (CORP_SALES_PERIOD_ID) REFERENCES CORP_SALES_PERIODS(ID)
);

CREATE TABLE CORP_SALESPERIOD_CATEGORIES (
ID INT PRIMARY KEY ,
COMPANY_ID INT NOT NULL,
CORP_SALES_PERIOD_ID INT NOT NULL,
PERIOD VARCHAR(50) NOT NULL,
LINE_NUMBER INT NOT NULL,
CATEGORY_ID INT NOT NULL,
LINE_TOTAL FLOAT NOT NULL,
COMMENTS VARCHAR(200),
IS_VOIDED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORIES(ID),
FOREIGN KEY (CORP_SALES_PERIOD_ID) REFERENCES CORP_SALES_PERIODS(ID)
);

CREATE TABLE CORP_SALESPERIOD_PRODUCTS (
ID INT PRIMARY KEY ,
COMPANY_ID INT NOT NULL,
CORP_SALES_PERIOD_ID INT NOT NULL,
PERIOD VARCHAR(50) NOT NULL,
LINE_NUMBER INT NOT NULL,
PRODUCT_ID INT NOT NULL,
LINE_TOTAL FLOAT NOT NULL,
COMMENTS VARCHAR(200),
IS_VOIDED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(ID),
FOREIGN KEY (CORP_SALES_PERIOD_ID) REFERENCES CORP_SALES_PERIODS(ID)
);

ALTER TABLE SALES ADD ASK_FOR_FEEDBACK BOOLEAN DEFAULT TRUE ;

ALTER TABLE ITEMS CHANGE COLUMN ITEM_NAME ITEM_NAME VARCHAR(150);
ALTER TABLE SKUS CHANGE COLUMN  SKU_NAME SKU_NAME  VARCHAR(150);

ALTER TABLE CUSTOMERS ADD IS_REFERENCIBLE BOOLEAN DEFAULT FALSE ;

ALTER TABLE BASE_CONFIGURATION CHANGE COLUMN CONFIG_DESCRIPTION CONFIG_DESCRIPTION VARCHAR(150) NOT NULL;

INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('TOLWSHSLSLEAD','Tolerance level in price to conver wishlist to sales lead(%)','Customer Management','NUMER',null,5);

INSERT INTO FINITE_VALUE_TYPE (CODE, DESCRIPTION) VALUES ('PRICSRC', 'PRICE SOURCE');


INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ITEMPRC','PRICSRC','Item');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('SKUPRC','PRICSRC','Sku');

ALTER TABLE WISHLISTS ADD ASSOCIATE VARCHAR(50);
ALTER TABLE WISHLISTS ADD FOREIGN KEY (ASSOCIATE) REFERENCES USERS(USER_ID);

ALTER TABLE PURCHASES ADD IS_REALISED BOOLEAN DEFAULT FALSE


CREATE TABLE PRODUCT_FAQ (
ID INT PRIMARY KEY AUTO_INCREMENT,
COMPANY_ID INT NOT NULL,
PRODUCT_ID INT NOT NULL,
LINE_NUMBER INT NOT NULL,
QUESTION BLOB NOT NULL,
ANSWER BLOB NOT NULL,
AUTHOR VARCHAR(50) NOT NULL,
COMMENTS VARCHAR(200),
IS_DELETED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(ID),
FOREIGN KEY (AUTHOR) REFERENCES USERS(USER_ID)
);

INSERT INTO FINITE_VALUE_TYPE (CODE, DESCRIPTION) VALUES ('ENQSRC', 'SOURCE OF ENQUIRY');

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ENQWBS','ENQSRC','Company Website');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ENQSTR','ENQSRC','Store walkin');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ENQTELP','ENQSRC','Telephone');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ENQASSCNT','ENQSRC','Associate Contact');

ALTER TABLE ENQUIRIES  MODIFY COLUMN DIVISION_ID INT NULL;
ALTER TABLE ENQUIRIES ADD DOC_NO VARCHAR(50) NOT NULL;

INSERT INTO NEXTUP_CONFIG (COMPANY_ID,PROGRAM,FIELD1_TYPE,FIELD1_WIDTH,FIELD1_VAULE,FIELD2_TYPE,FIELD2_WIDTH,FIELD2_VAULE,FIELD3_TYPE,FIELD3_WIDTH,FIELD3_VAULE,FIELD4_TYPE,FIELD4_WIDTH,FIELD4_VAULE) VALUES ( -1, 'Enquiry','CONSTANT',3,'ENQ','SEQCOMP',5,NULL,NULL,NULL,NULL,NULL,NULL,NULL);

DROP TABLE ENQUIRIES;

CREATE TABLE ENQUIRIES (
ID INT PRIMARY KEY AUTO_INCREMENT,
COMPANY_ID INT NOT NULL,
DIVISION_ID INT ,
TERRITORY_ID INT,
DOC_NO VARCHAR(50) NOT NULL,
ENQ_DATE DATETIME NOT NULL,
ENQUIRY_TYPE  VARCHAR(10),
ENQUIRY_SOURCE  VARCHAR(10),
ENQUIRY_STATUS  VARCHAR(10) NOT NULL,
CONTACT_ID INT,
CUSTOMER_ID INT,
REASON_ID INT,
FIRST_NAME VARCHAR(50), 
LAST_NAME VARCHAR(50),
PHONE VARCHAR(50),
EMAIL VARCHAR(50),
ADDRESS1 VARCHAR(50),
ADDRESS2 VARCHAR(50),
CITY VARCHAR(50),
ZIPCODE VARCHAR(50),
SALES_ASSOCIATE VARCHAR(50),
ENQUIRY  BLOB,
NEAREST_SKU_ID INT,
NEAREST_ITEM_ID INT,
COMMENTS VARCHAR(200),
IS_DELETED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (DIVISION_ID) REFERENCES DIVISIONS(ID),
FOREIGN KEY (CONTACT_ID) REFERENCES CONTACTS(ID),
FOREIGN KEY (REASON_ID) REFERENCES REASON_CODES(ID),
FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(ID),
FOREIGN KEY (TERRITORY_ID) REFERENCES TERRITORIES(ID),
FOREIGN KEY (ENQUIRY_TYPE) REFERENCES FINITE_VALUES(CODE),
FOREIGN KEY (ENQUIRY_SOURCE) REFERENCES FINITE_VALUES(CODE),
FOREIGN KEY (SALES_ASSOCIATE) REFERENCES USERS(USER_ID)
);

CREATE TABLE ENQUIRY_LINES (
ID INT PRIMARY KEY AUTO_INCREMENT,
COMPANY_ID INT NOT NULL,
LINE_NUMBER INT NOT NULL,
ENQUIRY_ID INT NOT NULL,
DOC_NO VARCHAR(50) NOT NULL,
SKU_ID INT NOT NULL,
QTY INT NOT NULL,
COMMENTS VARCHAR(200),
IS_DELETED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (ENQUIRY_ID) REFERENCES ENQUIRIES(ID),
FOREIGN KEY (SKU_ID) REFERENCES SKUS(ID)
);

INSERT INTO FINITE_VALUE_TYPE (CODE, DESCRIPTION) VALUES ('ENQSTATUS', 'STATUS OF ENQUIRY');

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ENQOPEN','ENQSTATUS','Open');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ENQASSND','ENQSTATUS','Assigned');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ENQINVLD','ENQSTATUS','Closed Invalid');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ENQLDGNRT','ENQSTATUS','Lead Generated');

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('ENQREAS','REASTYPE','Enquiry Process Reason');

INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('PROFDATAHIST','For profiling, use past data from','General','FINVAL','EVALDATE','LSTYR');

ALTER TABLE ITEMS  DROP FOREIGN KEY `items_ibfk_2`;
ALTER TABLE ITEMS ADD FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(ID);

ALTER TABLE SKUS  DROP FOREIGN KEY `skus_ibfk_2`;
ALTER TABLE ITEMS ADD FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(ID);

INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('AUTOEMAILREC','Email receipts for every sale','Customer Management','BOOL',null,'false');

INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('ALERFORDISC','Generate Alerts for new discussions','Workforce Management','BOOL',null,'false');

CREATE TABLE PRODUCT_PRICE_RANGES (
ID INT PRIMARY KEY AUTO_INCREMENT,
COMPANY_ID INT NOT NULL,
PRODUCT_ID INT NOT NULL,
ITEMCLASS VARCHAR(10) NOT NULL,
MIN_PRICE FLOAT,
MAX_PRICE FLOAT,
COMMENTS VARCHAR(300),
IS_DELETED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (ITEMCLASS) REFERENCES FINITE_VALUES(CODE),
FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(ID)
);

CREATE TABLE PRODUCT_ATTRIBUTES (
ID INT PRIMARY KEY AUTO_INCREMENT,
COMPANY_ID INT NOT NULL,
PRODUCT_ID INT NOT NULL,
ATTRIBUTE VARCHAR(100) NOT NULL ,
ATTRVAL_DATA_TYPE VARCHAR(10) NOT NULL ,
COMMENTS VARCHAR(300),
IS_DELETED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (ATTRVAL_DATA_TYPE) REFERENCES FINITE_VALUES(CODE),
FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(ID)
);

CREATE TABLE ITEM_ATTRIBUTES (
ID INT PRIMARY KEY AUTO_INCREMENT,
COMPANY_ID INT NOT NULL,
ITEM_ID INT NOT NULL,
ATTRIBUTE_ID INT NOT NULL,
VALUE VARCHAR(100) NOT NULL ,
COMMENTS VARCHAR(300),
IS_DELETED BOOLEAN DEFAULT FALSE,
CREATED_DATE DATETIME,
LAST_UPDATED_DATE DATETIME,
CREATED_BY VARCHAR(50),
LAST_UPDATED_BY VARCHAR(50),
VERSION INT DEFAULT 1,
FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(ID),
FOREIGN KEY (ITEM_ID) REFERENCES ITEMS(ID),
FOREIGN KEY (ATTRIBUTE_ID) REFERENCES PRODUCT_ATTRIBUTES(ID)
);


INSERT INTO FINITE_VALUE_TYPE (CODE, DESCRIPTION) VALUES ('BUNDPRC', 'BUNDLE PRICING');

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('FIXBDPRC','BUNDPRC','Fixed Price');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('MSTBDPRC','BUNDPRC','Price of Master');



ALTER TABLE PROMOTIONS ADD COLUMN BUNDLE_PRICING VARCHAR(10);
ALTER TABLE PROMOTIONS ADD FOREIGN KEY (BUNDLE_PRICING) REFERENCES FINITE_VALUES(CODE);

ALTER TABLE PROMOTIONS ADD COLUMN BUNDLE_PRICE FLOAT;

ALTER TABLE COMPANIES ADD LOGO VARCHAR(50);
ALTER TABLE USERS ADD PHOTO VARCHAR(100);

INSERT INTO BASE_CONFIGURATION(CODE,CONFIG_DESCRIPTION,CONFIG_GROUP,VALUE_TYPE,VALUE_GENERATOR,DEFAULT_VALUE)
values ('CUSTCRENQ','Allow Customer Creation while from Enquiries','Customer Management','BOOL',null,'true');

ALTER TABLE FOLLOWUPS ADD STATUS VARCHAR(10);

ALTER TABLE FOLLOWUPS ADD FOREIGN KEY (STATUS) REFERENCES FINITE_VALUES(CODE);

INSERT INTO FINITE_VALUE_TYPE (CODE, DESCRIPTION) VALUES ('FLPSTATUS', 'FOLLOWUP STATUS');

INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('FLPSCHLD','FLPSTATUS','Scheduled');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('FLPELPSD','FLPSTATUS','Open');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('FLPCMPLTD','FLPSTATUS','Completed');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('FLPSKP','FLPSTATUS','Skipped');
INSERT INTO FINITE_VALUES(CODE,TYPE_CODE,DESCRIPTION) VALUES ('FLPABRT','FLPSTATUS','Aborted');
